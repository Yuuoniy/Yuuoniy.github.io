<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drafts on Yuuoniy&#39;s blog</title>
    <link>https://yuuoniy.github.io/drafts/</link>
    <description>Recent content in Drafts on Yuuoniy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2020–2020, Yuuoniy and the Hugo Authors; all rights reserved.</copyright><atom:link href="https://yuuoniy.github.io/drafts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://yuuoniy.github.io/drafts/llvm-backend-implementation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuuoniy.github.io/drafts/llvm-backend-implementation/</guid>
      <description>实现 LLVM 后端 前言  定义寄存器和寄存器集合 定义调用约定 定义指令集 实现栈帧 lowering 打印指令 选择指令 增加指令编码 子平台支持 多指令 lowering 平台注册  LLVM 有自己的定义目标机器的方式——tablegen，通过它来指定目标的寄存器、 指令集、调用约定等，并且tablegen函数以编程的方式缓解了描述一套架构属性所带来
定义调用约定 定义指令集 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://yuuoniy.github.io/drafts/llvm-backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuuoniy.github.io/drafts/llvm-backend/</guid>
      <description>LLVM Backend 前言 LLVM backend的主要功能是code gen，也就是代码生成，其中包括若干个code gen分析换转化pass将LLVM IR转换成特定目标架构的机器 代码。
overview 在得到优化过的 LLVM IR 之后，下一个阶段就是把它转为目标平台的指令了。LLVM 通过 SelectionDAG 来将 IR 转为机器指令。在此过程中，指令通过 DAG 的节点来表示，最 后线性的 IR 便被转为了 SelectionDAG。在此之后，SelectionDAG 还要经历以下几个阶段。
  由 LLVM IR 创建 SelectionDAG。
  SelectionDAG 节点合法化。
  DAG 合并优化。
  针对目标指令的指令选择。
  调度并发射机器指令。
  寄存器分配——SSA 解构、寄存器赋值、寄存器溢出。
  发射机器码。
所有以上步骤在 LLVM 中都是模块化的。
  LLVM 的后端有一套流水线架构，指令经历了许多阶段：从 LLVM IR 到 SelectionDAG、MachineDAG、MachineInstr，最终到MCInst
指令选择-指令调度-寄存器分配
  指令选择阶段
将 IR 转化为指定目标的 SelectionDAG 结点。将三地址结构的IR转化为有向无环图(DAG) 、</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yuuoniy.github.io/drafts/llvm-frontend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuuoniy.github.io/drafts/llvm-frontend/</guid>
      <description>LLVM 入门教程之 frontend 介绍 前言 clang icc(Intel C++ Compiler)
 实现词法分析器 定义抽象语法树 实现语法分析器 解析简单表达式 解析二元表达式 为解析编写驱动  定义抽象语法树 AST 的使用集中在语义分析阶段，在这个阶段，编译器会检查程序和语言元素是否正 确使用。
http://clang.llvm.org/docs/IntroductionToTheClangAST.html
实现语法分析器 语法分析器（parser）根据语言的语法规则来解析代码，解析阶段决定了输入的代码是 否能够根据既定的语法组成token流 5。在此阶段会构造出一棵解析树，而语法分析器则会 定义一些函数来把代码组织成一种被称为AST的数据结构
解析简单的表达式 生成 LLVM IR 实现 codegen 函数，
这一函数返回值是 LLVM Value 对象，它表示了静态单赋值（SSA）对象。在 Codegen 过程中还需要定义几个静态对象。
Module_Ob模块包含了代码中的所有函数和变量。
Builder对象帮助生成 LLVM IR 并且记录程序的当前点，以插入 LLVM 指令。另外， Builder对象有创建新指令的函数。
Named_Values map 对象记录当前作用域中的所有已定义值，充当符号表的功能。
codegen Codegen()函数使用了LLVM内建的函数调用来生成IR</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yuuoniy.github.io/drafts/llvm-ir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuuoniy.github.io/drafts/llvm-ir/</guid>
      <description>LLVM IR 层介绍 前言 LLVM IR 是 LLVM 的中间语言，先前的文章包括了 IR 的简单介绍，本篇文章针对 IR深入学习。
包括以下内容：
  LLVM IR 特性
  IR 语法
  生成 IR
  格式 IR是SS A静态单一赋值的（Static Single Assignment）。
LLVM IR 是强类型语言。文档 LangRef
SSA “alloca + mem2reg”技术
语法 结合例子分析语法，
首先编写程序
int sum(int a,int b){ return a+b; } 编译转化为 LLVM IR
clang sum.c -emit-llvm -S -c -o sum.ll 得到 ll 文件：
$ cat sum.ll ; ModuleID = &amp;#39;sum.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yuuoniy.github.io/drafts/llvm-projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuuoniy.github.io/drafts/llvm-projects/</guid>
      <description>LLVM 入门教程之外部项目 本文内容介绍 LLVM 的相关项目，这些项目不包括在 LLVM+Clang, 因此需要额外安装，具体包括：
 Clang extra tools Compiler-RT DragonEgg LLVM test suite LLDB libc++  此外，还有两个官方 LLVM 项目：Polly 和 lld，本文不涉及。
安装 先去官网或镜像网站下载对应的源码，然后把源码放到对应目录后进行编译安装，具体的目录如下：
Compiler-RT: llvm/projects/compiler-rtCompiler-RT DragonEgg LLVM test suite LLDB LLBD 是使用 LLVM 基础架构构建的调试器，相当于 gdb。
LLBD 依赖swig、libedit、python。首先需要通过以下命令安装:
sudo apt get install swig libedit-dev pythonlibc++ 标准库 libc ++ 是 LLVM 项目重写的C++ 标准库，支持最新的C++标准。
参考资料  lldb Tutorial   </description>
    </item>
    
  </channel>
</rss>
